7.

В циклы можно записывать только числовые типы данных.
	for(float i = 200; i > 10; i /= 2) {				i = 200;(Значение переменой)
                Console.WriteLine("Element: {0}", i);			i > 10; (Условие цикла тоесть цикл будет выполняться до тех пор пока значение будет больше 10)
        }								i /= 2 (Указываем как будет видо изменяться переменная)

------------Терменал----------------------
PS C:\project> dotnet run
Element: 200
Element: 100 
Element: 50  
Element: 25  
Element: 12,5
PS C:\project> 
------------------------------------------

	    byte i = 0;							byte i = 0; (Здесь мы задаём значение переменой)
            while(i < 10) {						while(i < 10) (Прописываеться только условие)
                Console.WriteLine("Element: {0}", i);
                i++;							i++; (Здесь прописываем как будет видо изменяться переменная)
            }

------------Терменал----------------------
PS C:\project> dotnet run
Element: 0
Element: 1
Element: 2
Element: 3
Element: 4
Element: 5
Element: 6
Element: 7
Element: 8
Element: 9
PS C:\project> 
------------------------------------------

 	   byte i = 100;
           do{									do (Начало цикла выполниться 1 раз 100%)
                Console.WriteLine("Element: {0}", i);				while (Условие при котором закончиться цикл)
           } while(i < 10); 

------------Терменал----------------------
PS C:\project> dotnet run
Element: 100
PS C:\project> 
------------------------------------------

for(short i =0; i < 10; i++){
            if(i > 5)
                break;								break; (Можно на сильно выйти из цикла до него пишиться условие if при котором цикл завершиться)

            System.Console.WriteLine("El: " + i);
           } 
	if(i % 2 == 0)
                continue;							continue; (Пропускает один круг цикла при выполнении условия)


8.

Масивы данных.
Одномерные массивы.
Для создания массива используються все те же типы данных что и в переменных. Пример: byte[]
[] - квадратные скобки обозночают что мы создоём массив а не переменую.

		byte[] nums = new byte[5]; Ну а число 5 озночает сколько в этом массиве будет элементов.
		  |     |      |    |  
		Тип    Имя  Ключь. {2} 
               Данных    Слово для
	     В массиве   Выделение
                {1}       Памяти.

		nums[0] = 250;		nums[0] - мы оброщаемся к имени массива а в квадратных скобках пишим порядковый номер любого элемента массива.
					250; - значение 1 элемента массива.				 Примичание: Счёт в массиве начинаеться с '0'.	

nums.Length  // nums-Имя массива. // .Length-Обозночает длину массива.
Используеться вот так.
	byte[] nums = new byte[5];
            nums[0] = 250;
            nums[1] = 50;
            nums[2] = 20;
            nums[3] = 100;
            nums[4] = 25;
	for(byte i = 0; i < nums.Length; i++)
                System.Console.WriteLine("El: " + nums[i]);
------------Терменал----------------------
PS C:\project> dotnet run
El: 250
El: 50 
El: 20 
El: 100
El: 25 
PS C:\project> 
------------------------------------------

Подсчёт всех элементов массива.
using System;

namespace project {

    class Program {

        static void Main() {
            
            short[] numbers = new short[10];
            short summa = 0;

            Random random = new Random();
            for(byte i = 0; i < numbers.Length; i++){
                numbers[i] = Convert.ToInt16(random.Next(-15, 15));
                Console.WriteLine("El: " + numbers[i]);

                summa += numbers[i];
           }
           Console.WriteLine("Summa: " + summa);
        }

    }

}

------------Терменал----------------------
PS C:\project> dotnet run
El: -2
El: 10    
El: -11   
El: -10   
El: 12    
El: -7    
El: 0     
El: -9    
El: -7    
El: 7     
Summa: -17
PS C:\project>  
------------------------------------------

Многомерные массивы.

using System;

namespace project {

    class Program {

        static void Main() {
            
            char[,] symbols = new char[2,3];			[,] - Озгочает что массив многомерный. 	new char[2,3]; - 1 число сколько будут элементов в 1 массиве - 2 число соотвествено сколко будет элементов во 2 массиве.
            symbols[0,0] = 'H';
            System.Console.WriteLine(symbols[0,0]);

            int[,] nums = {
                {4, 6, 7},
                {5, 7, 3},             <------- это массив который ноходиться в массиве.
                {3, 3, 2}
            };

            nums[1, 2] = 56;	       <------- это пример как изменить значение элемента в многомерном массиве.

        }

    }

}


9.

Цикл «foreach» для работы с массивами. Generics.

using System;

namespace project {

    class Program {

        static void Main() {
            
            short[,] nums = {
                {4, 5, 7},
                {43, 52, 17},			<----------- многомерный массив.
                {24, 53, 37},
            };

            foreach(short el in nums) {						foreach - Цикл для перепорки массива.		in - он обозночает что после этого код слова мы будем писать имя массива. 		el - Имя перменной внутри цикла.				nums - имя массива кторому мы оброщаемся.
                System.Console.WriteLine("El: " + el);			<------ Чтобы вывесть все значения всех элементов массива мы зписываем имя переменой которой вписывали в цикле.
            }

        }

    }

}

------------Терменал----------------------
PS C:\project> dotnet run
El: 4
El: 5 
El: 7 
El: 43
El: 52
El: 17
El: 24
El: 53
El: 37
PS C:\project> 
------------------------------------------

Динамический массив данных.

using System;
using System.Collections.Generic;		<---- Библиотека для создания динамичиских массивов. А также даёт пользовоться класом List.

namespace project {

    class Program {

        static void Main() {
            
            List<int> numbers = new List<int>() {			<------- List-класс для создания динам массивов. <int>-Переменная в динам массиве List.
                4, 6, 7
            };

            numbers.Add(40);                                            <------- numbers.Add-Позволяет добовлять элементы и редактировать значения элементов.
            numbers.Add(100);
            numbers.Add(5);

            numbers.Remove(100);					<------- numbers.Remove-Позволяет удалять элементы массива. 
            numbers.Sort();						<------- numbers.Sort();-Сортирует значения элементов массива с меньшего к большему.
            numbers.Reverse();						<------- numbers.Reverse();-Переворачивает значения с большего к меньшему работает только в паре с методом numbers.Sort();.

            foreach(int el in numbers) {
                System.Console.WriteLine("El: " + el);
            }

        }

    }

}

------------Терменал----------------------
PS C:\project> dotnet run
El: 40
El: 7
El: 6
El: 5
El: 4
PS C:\project> 
------------------------------------------

The end.
